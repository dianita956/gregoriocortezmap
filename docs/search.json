[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "El Corrido de Gregorio Cortez NER and Mapping book",
    "section": "",
    "text": "Introduction\nThis book is design to demonstrate how to extract Name Entity places and provide location context to El Corrido de Gregorio Cortez."
  },
  {
    "objectID": "01webscrapBS.html#prerequisite",
    "href": "01webscrapBS.html#prerequisite",
    "title": "1  Web Scraping Wiki tables with Beautiful Soup",
    "section": "1.1 PreRequisite",
    "text": "1.1 PreRequisite\n\n\nCode\nimport requests\nimport pandas as pd\nimport json #javascript object notation to store data outside python. watch videos from Matt Digital Humanities. \nfrom bs4 import BeautifulSoup \n\n\n\n1.1.1 List of Municipalities in Texas\n\n\nCode\ndef table_extraction(a,b):\n    url= a \n    file = f\"list of texas places/{b}.txt\" \n    s = requests.get(url)\n    soup= BeautifulSoup(s.text, \"html.parser\") #to tell the program to read the site as HTML (lxml)\n    table = soup.find(\"table\", class_=\"wikitable sortable\")\n    with open (file, \"w\", encoding=\"utf-8\")as f: \n        #rows=list()\n        #headerString  = \"\"\n        dataString = \"\"\n        for row in table.find_all(\"tr\"):   \n            #for th in row.find_all(\"th\"): \n                #headerString  = headerString+th.get_text(strip=True)+\"|\"\n                #print(headerString)\n                #ending a line break to organize the txt file\n            for td in row.find_all(\"td\"):\n                dataString = dataString+td.get_text(strip=True)+\"|\"\n            dataString=dataString + \"\\n\"\n        #f.write(headerString)       \n        f.write(dataString)\n\ndef do_all(a, b):\n    table_extraction(a,b)\ndo_all(\"https://en.wikipedia.org/wiki/List_of_municipalities_in_Texas\",\"List of municipalities in Texas\")"
  },
  {
    "objectID": "02textfile_to_jsonfile.html#list-of-municipalities-in-texas",
    "href": "02textfile_to_jsonfile.html#list-of-municipalities-in-texas",
    "title": "2  Text file to json file",
    "section": "2.1 List of municipalities in Texas",
    "text": "2.1 List of municipalities in Texas\n\n\nCode\nimport json\n#file to convert\nfile= f\"list of texas places\\List of municipalities in Texas.txt\"\n#create a list to store data\ndictionary= {}\nmunicipalitylist = []\n#read file\nwith open(file, encoding='utf-8') as f:\n    for d in f:\n        if \"|\" in d:\n            #print(d)\n            #read lines from file, creating vars based on position and indicator of info needed\n            rank, municipality, designation, county, county2, data = d.strip(\" \").split(\"|\", 5)\n            x={\n                \"Municipality\": municipality,\n                #\"Designation\": designation,\n                \"Primary County\": county,\n                \"Secondary County(ies)\": county2\n            }\n            municipalitylist.append(x)\n            #print(municipalitylist)\n\n\ndictionary[\"List of Municipalities\"] = municipalitylist\n\n#print(municipalitylist)\n#print(dictionary)\n\n#print(len(dictionary))\n#create json output file\nout_file = open(\"data/TexasNER_GPE_master.json\", \"w\")\njson.dump(dictionary, out_file, indent=4) \nout_file.close()\n\n## List of unincoporated communities \n\nimport json\n#file to convert\nfile= f\"list of texas places\\List of unincorporated communities in Texas.txt\"\n#create a list to store data\ndictionary= {}\nunincorporatedcommunitieslist = []\n#read file\nwith open(file, encoding='utf-8') as f:\n    for d in f:\n        if \"|\" in d:\n            #print(d)\n            #read lines from file, creating vars based on position and indicator of info needed\n            community, county, data = d.strip(\" \").split(\"|\", 2)\n            x={\n                \"Community\": community,\n                \"Primary County\": county\n            }\n            unincorporatedcommunitieslist.append(x)\n            #print(municipalitylist)\n\n\ndictionary[\"List of Unincorporated communities\"] =  unincorporatedcommunitieslist\n\n#print(municipalitylist)\n#print(dictionary)\n\n#print(len(dictionary))\n#create json output file\nout_file = open(\"data/TexasNER_GPE_master.json\", \"a\")\njson.dump(dictionary, out_file, indent=4) \nout_file.close()\n\n## List of Ghost towns\n\nimport json\n#file to convert\nfile= f\"list of texas places\\List of ghost towns in Texas.txt\"\n#create a list to store data\ndictionary3= {}\nghosttownslist = []\n#read file\nwith open(file, encoding='utf-8') as f:\n    for d in f:\n        if \"|\" in d:\n            #print(d)\n            #read lines from file, creating vars based on position and indicator of info needed\n            name, maincounty, data = d.strip(\" \").split(\"|\", 2)\n            x={\n                \"Name\": name,\n                \"Main County\": maincounty,\n            }\n            ghosttownslist.append(x)\n            #print(municipalitylist)\n\n\ndictionary[\"List of Ghost towns\"] = ghosttownslist\n\n#print(municipalitylist)\n#print(dictionary)\n\n#print(len(dictionary))\n#create json output file\nout_file = open(\"data/TexasNER_GPE_master.json\", \"a\")\njson.dump(dictionary, out_file, indent=4) \nout_file.close()"
  },
  {
    "objectID": "03NER_SpacyCustomModel.html",
    "href": "03NER_SpacyCustomModel.html",
    "title": "3  NER_SpacyCustomModel",
    "section": "",
    "text": "Code\nimport spacy\nfrom spacy.lang.en import English\nfrom spacy.lang.es import Spanish\nfrom spacy.pipeline import EntityRuler\nimport json\nimport random\nfrom spacy.tokens import Doc\nfrom spacy.training import Example\nfrom spacy.language import Language\n\n\n\n\nCode\ndef load_data(file):\n    with open(file, 'r', encoding='utf-8') as f:\n        print(f)\n        return(json.load(f))\n    \ndef save_data (file, data):\n    with open (file, \"w\", encoding='utf-8') as f:\n       data = json.dump(data, f, indent=4)\n       print(data)\n\n\n\n\nCode\ndef create_training_data(file, type):\n    #print(type)\n    #print(file)\n    data = load_data(file)\n    #print(data)\n    patterns=[]\n    for key, value in data.items():\n        print(key)\n        if key == \"List of Municipalities\":\n            for obj in value: #muni loop\n                #print(obj.get(\"Municipality\"))\n                pattern = {\n                    \"label\":type,\n                    \"pattern\": obj.get(\"Municipality\")\n                    }\n                patterns.append(pattern) # end of muni loop\n            for obj in value: #primary county loop \n                #if any(d.get(\"Primary County\") == \"Gonzales\" for d in value): \n                    #print(\"found in Municipality\") \n                if not any(d.get(\"Municipality\") == obj.get(\"Primary County\") for d in value):\n                    #print('not found in Manicipality')\n                    pattern = {\n                        \"label\":type,\n                        \"pattern\": obj.get(\"Primary County\")\n                        }\n                    patterns.append(pattern)           \n\n        if key == \"List of Unincorparated Communities\":\n            for obj in value: #muni loop\n                #print(obj.get(\"Municipality\"))\n                pattern = {\n                    \"label\":type,\n                    \"pattern\": obj.get(\"Community Name\")\n                    }\n                patterns.append(pattern) # end of community name loop\n            for obj in value: #county loop \n                if not any(d.get(\"Community Name\") == obj.get(\"County\") for d in value):\n                    pattern = {\n                        \"label\":type,\n                        \"pattern\": obj.get(\"County\")\n                        }\n                    patterns.append(pattern)                 \n\n        if key == \"List of Ghost Town\":\n            for obj in value: #ghost town loop\n                #print(obj.get(\"Municipality\"))\n                pattern = {\n                    \"label\":type,\n                    \"pattern\": obj.get(\"Name\")\n                    }\n                patterns.append(pattern) # end of muni loop\n            for obj in value: #county loop \n                if not any(d.get(\"Name\") == obj.get(\"County\") for d in value):\n                    pattern = {\n                        \"label\":type,\n                        \"pattern\": obj.get(\"County\")\n                        }\n                    patterns.append(pattern)\n\n        #for obj in value: # unicorpated communities loop\n                #if any(d.get(\"Primary County\")=='Karnes' for d in value): \n                    #print(\"found in Primary County\")\n        \n            #print(pattern)\n            #print(patterns)\n\n    return(patterns)\npatterns = create_training_data('data/TexasNER_GPE_master.json', 'GPE')\n#print(patterns)\n\n\n<_io.TextIOWrapper name='data/TexasNER_GPE_master.json' mode='r' encoding='utf-8'>\nList of Ghost towns\n\n\n\n\nCode\ndef generate_rules(patterns):\n    nlp = English()\n    #ruler = EntityRuler(nlp)\n    ruler = nlp.add_pipe('entity_ruler', config={\"validate\": True}) \n    ruler.add_patterns(patterns) \n    nlp.to_disk(\"tx_trained_ner\")\n\ndef test_model(model, text):\n    doc = nlp(text)\n    results = []\n    entities = []\n    for ent in doc.ents:\n        entities.append((ent.start_char, ent.end_char, ent.label_))\n    if len(entities) >0: #if entity has been found move entity to results and entity list\n        results = [text, {\"entities\": entities}]\n        #print(results)\n    return (results)\n\n#patterns = create_training_data('../Corridos/data/TexasNER_GPE_master.json', 'GPE')\ngenerate_rules(patterns)\n#print(patterns)\n\n#how spacy wants to see read the data#\n#TRAIN_DATA = [(text, {\"entities\": [(start, end, label)]})]#\n\nnlp = spacy.load(\"tx_trained_ner\")\nTRAIN_DATA= []\n\nwith open (\"elcorridodegregoriocortez.txt\", \"r\", encoding='utf-8')as f:\n    text = f.read()\n    #print(text)\n    segments = text.split(\"\\n\\n\")[0:]\n    #cleaning up the lyric text. making it easier to read for the program\n    for segment in segments:\n        segment = segment.strip() #might not need this code line \n        segment = segment.replace(\"\\n\", \" \")# might not need this code line\n        #print(segment)\n        punc = '[\":;,“.”[@_!$%^&*()<>?/\\|}{~:]#]'\n        for ele in segment:\n            if ele in punc:\n                segment = segment.replace(ele, \"\")\n\n        #print(segment)\n\n        results = test_model(nlp, segment)\n        if results != []: #it found something and return it\n            TRAIN_DATA.append(results)\n        print(results)\n\n#print(TRAIN_DATA)\nsave_data(\"data/TexasNER_GPE_master.json\", TRAIN_DATA)\n\n\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\nNone\n\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\nC:\\Users\\dmlpz\\anaconda3\\lib\\site-packages\\spacy\\pipeline\\entityruler.py:393: UserWarning:\n\n[W036] The component 'entity_ruler' does not have any patterns defined.\n\n\n\n\n\nCode\ndef train_spacy(data, iterations): #passing training data/set and the number/generation of the training process. 30 is good. long time!!!!\n    #print(data)\n    TRAIN_DATA = data\n    #print(TRAIN_DATA)\n    nlp = spacy.blank(\"en\")\n    #print(nlp)\n    if \"ner\" not in nlp.pipe_names:\n        ner = nlp.create_pipe(\"ner\") #if there is no ner in the pipe, create a pipe\n        nlp.add_pipe(\"ner\", last=True)\n    \n    for _, annotations in TRAIN_DATA: #add labels\n        print(annotations.get(\"entities\"))\n        for ent in annotations.get(\"entities\"):\n            ner.add_label(ent[2]) # i'm only working with one label 'GPE' if more increase i believe double check\n    \n    other_pipes = [pipe for pipe in nlp.pipe_names if pipe != \"ner\"]  \n    with nlp.disable_pipes(*other_pipes): #won't mess up other pipes\n        optimizer = nlp.begin_training()\n        for itn in range(iterations): # adjust the funtion not the items inside. arg of interations 30 is good\n            print(\"Starting iteration \"+ str(itn)) #where I am at in the interations process\n            random.shuffle(TRAIN_DATA) #shuffle helps the program to learn not memorize order. \n            losses = {}\n            for text, annotations in TRAIN_DATA:\n                doc = nlp.make_doc(text)\n                example = Example.from_dict(doc, annotations) #fix found here for ValueError: [E973] Unexpected type for NER data https://github.com/explosion/spaCy/issues/7038\n                nlp.update([example], drop = 0.2, sgd= optimizer, losses=losses)            \n            print(losses)  \n    \n    return(nlp) #model return\n\n#TRAIN_DATA = load_data(\"../Corridos/data/TxMunicipality_training_data.json\")\n#print(TRAIN_DATA)\nnlp = train_spacy(TRAIN_DATA, 30)\nnlp.to_disk(\"tx_ner_model\")\n\n\nStarting iteration 0\n{}\nStarting iteration 1\n{}\nStarting iteration 2\n{}\nStarting iteration 3\n{}\nStarting iteration 4\n{}\nStarting iteration 5\n{}\nStarting iteration 6\n{}\nStarting iteration 7\n{}\nStarting iteration 8\n{}\nStarting iteration 9\n{}\nStarting iteration 10\n{}\nStarting iteration 11\n{}\nStarting iteration 12\n{}\nStarting iteration 13\n{}\nStarting iteration 14\n{}\nStarting iteration 15\n{}\nStarting iteration 16\n{}\nStarting iteration 17\n{}\nStarting iteration 18\n{}\nStarting iteration 19\n{}\nStarting iteration 20\n{}\nStarting iteration 21\n{}\nStarting iteration 22\n{}\nStarting iteration 23\n{}\nStarting iteration 24\n{}\nStarting iteration 25\n{}\nStarting iteration 26\n{}\nStarting iteration 27\n{}\nStarting iteration 28\n{}\nStarting iteration 29\n{}\n\n\n\n\nCode\ntest= \"elcorridodegregoriocortez.txt\"\nwith open(test, 'r', encoding='utf-8') as c:\n    test = c.read()\n\n\nimport re\n\ndef clean_text(text):\n    cleaned= re.sub(r'[\":;,.“”]', \"\", text)\n    return(cleaned)\ntest = clean_text(test)\nprint(test)\n\nTxGPE=[]\nnlp = spacy.load(\"tx_ner_model\")\ndoc =nlp(test) \n#print(doc)\nfor ent in doc.ents:\n    #print(ent.text, ent.label_)\n    if ent.label_ == \"GPE\":\n        TxGPE.append(ent.text)\nprint(TxGPE)\n\n\nIn the country of Karnes \nLook what has happened \nThe Major Sheriff died\nLeaving Román badly wounded\n\nIt must have been two in the \nafternoon\nWhen people arrived\nThey said to one another\nIt is not known who killed him\n\nThey went around asking questions\nAbout half an hour afterward \nThey found that the wrongdoer\nHad been Gregorio Cortez\n\nNow they have outlawed Cortez\nThroughout the whole state\nLet him be taken dead or alive \nHe has killed several men\n\nThey said Gregorio Cortez \nWith his pistol in his hand\nI don’t regret that I killed him \nI regret my brother’s death\n\nThen said Gregorio Cortez \nAnd his soul was all aflame \nI don’t regret that I killed him\nA man must defend himself\n\nThe Americans were coming \nThey were whiter than a dove \nFrom the fear that they had \nOf Cortez and of his pistol \n\nThen the Americans said \nThen they said fearfully\nCome let us follow the trail\nThe wrongdoer is Cortez\n\nThey set the bloodhounds on him \nSo they could follow his trail \nBut trying to overtake  Cortez\nWas like following a star \n\nHe struck out for Gonzales\nWithout showing any fear\nFollow me cowardly rangers \nI am Gregorio Cortez\n\nFrom Belmont he went to the \nranch  \nThey succeeded in surrounding \nhim \nQuite a few more than three hundred \nBut there he jumped their corral \n\nWhen he jumped their corral \nAccording to what we hear\nThey got into a gunfight\nAnd he killed them another sheriff \n\nThen said Gregorio Cortez \nWith his pistol in his hand \nDon’t run you cowardly rangers \nFrom just one Mexican\n\nGregorio Cortez went out \nHe went towards Laredo\nThey decided not to follow \nBecause they were afraid of him\n\nThen said Gregorio Cortez \nWhat is the use of your scheming?\nYou cannot catch me\nEven with those bloodhounds\n\nThen the Americans said \nIf we catch you with him what \nshall we do?\nIf we fight him man to man \nVery few of us will return\n\nOver by El Encinal \nAccording to what we hear \nThey made him a corral \nAnd he killed them another sheriff \n\nThen said Gregorio Cortez \nShooting out a lot of bullets\nI have weathered thunderstorms\nThis little mist doesn’t bother me\n\nNow he has met a Mexican\nHe says to him haughtily\ntell me the news\nI am Gregorio Cortez\n\nIt is said that because of me \nMany people have been killed\nI will surrender now\nBecause such things are not right\n\nCortez says to Jesús\nAt last you are going to see it\nGo tell the rangers\nTo come and arrest me\n\nAll the rangers were coming \nComing so fast they even flew \nFor they wanted to get \nThe thousand dollars they were \noffered \n\nWhen they surrounded the house \nCortez suddenly appeared before\n    them \nYou will take me if I’m willing \nBut not any other way\n\nThen the Major Sheriff said \nAs if he was going to cry \nCortez hand over your weapons\nWe are not going to kill\n\nThen said Gregorio Cortez\nShouting to them in a loud voice\nI won’t surrender my arms\nUntil I am in a cell\n\nThen said Gregorio Cortez\nHe said in his godly voice \nI won’t surrender my arms\nUntil I’m inside a jail\n\nNow they have taken Cortez\nNow matters are at an end \nHis poor family\nAre suffering in their hearts\n\nNow with this I say farewell \nIn the shade of a cypress tree\nThis is the end of the singing \nof the ballad of Cortez\n\n\n[]"
  },
  {
    "objectID": "04GregCortezMap.html",
    "href": "04GregCortezMap.html",
    "title": "4  Mapping Gregorio Cortez’s route",
    "section": "",
    "text": "Code\nimport geopandas as gpd\nfrom pyproj import CRS\nimport pandas as pd\nimport numpy as np\n\nfrom geograpy import places\nimport re\n\nimport geopy\nfrom geopy.geocoders import ArcGIS\n\n\nimport shapely\nfrom shapely.geometry import Point\nfrom shapely.wkt import loads\nimport plotly.express as px \n\nimport contextily as cx\nimport xyzservices.providers as xyz\nimport matplotlib.pyplot as plt #to make sure there are no errors when plotting a graph\nimport pyproj\n\nimport spacy\nfrom spacy import displacy\n\nimport googlemaps\n\nimport locationtagger\nnlp = spacy.load(\"en_core_web_sm\")\n\n\n\n\nCode\ntext = \"elcorridodegregoriocortez.txt\"\nwith open(text, 'r', encoding='utf-8') as c:\n    text = c.read()\n    \ndef clean_text(text):\n    cleaned= re.sub(r'[\":;,.“”]', \"\", text)\n    return(cleaned)\ntext = clean_text(text)\n#print(text)\n\n\nTxGPE=[]\nnlp = spacy.load(\"tx_trained_ner\")\ndoc =nlp(text) \n#print(doc)\nfor ent in doc.ents:\n    #print(ent.text, ent.label_)\n    if ent.label_ == \"GPE\":\n        TxGPE.append(ent.text)\nprint(TxGPE)\n\n\n['Karnes', 'Gonzales', 'Laredo', 'Encinal']\n\n\n\n\nCode\nents = [(e.text, e.start_char, e.end_char, e.label_)for e in doc.ents]\nprint(ents)\n\nents = [(e.text)for e in doc.ents]\nprint(ents)\n\n\n[('Karnes', 18, 24, 'GPE'), ('Gonzales', 1051, 1059, 'GPE'), ('Laredo', 1550, 1556, 'GPE'), ('Encinal', 1864, 1871, 'GPE')]\n['Karnes', 'Gonzales', 'Laredo', 'Encinal']\n\n\n\n\nCode\ndisplacy.render(doc, style ='ent', jupyter=True, page=True)\n\n\n\n\n    \n        displaCy\n    \n\n    \n\nIn the country of \n\n    Karnes\n    GPE\n\n Look what has happened The Major Sheriff diedLeaving Román badly woundedIt must have been two in the afternoonWhen people arrivedThey said to one anotherIt is not known who killed himThey went around asking questionsAbout half an hour afterward They found that the wrongdoerHad been Gregorio CortezNow they have outlawed CortezThroughout the whole stateLet him be taken dead or alive He has killed several menThey said Gregorio Cortez With his pistol in his handI don’t regret that I killed him I regret my brother’s deathThen said Gregorio Cortez And his soul was all aflame I don’t regret that I killed himA man must defend himselfThe Americans were coming They were whiter than a dove From the fear that they had Of Cortez and of his pistol Then the Americans said Then they said fearfullyCome let us follow the trailThe wrongdoer is CortezThey set the bloodhounds on him So they could follow his trail But trying to overtake  CortezWas like following a star He struck out for \n\n    Gonzales\n    GPE\n\nWithout showing any fearFollow me cowardly rangers I am Gregorio CortezFrom Belmont he went to the ranch  They succeeded in surrounding him Quite a few more than three hundred But there he jumped their corral When he jumped their corral According to what we hearThey got into a gunfightAnd he killed them another sheriff Then said Gregorio Cortez With his pistol in his hand Don’t run you cowardly rangers From just one MexicanGregorio Cortez went out He went towards \n\n    Laredo\n    GPE\n\nThey decided not to follow Because they were afraid of himThen said Gregorio Cortez What is the use of your scheming?You cannot catch meEven with those bloodhoundsThen the Americans said If we catch you with him what shall we do?If we fight him man to man Very few of us will returnOver by El \n\n    Encinal\n    GPE\n\n According to what we hear They made him a corral And he killed them another sheriff Then said Gregorio Cortez Shooting out a lot of bulletsI have weathered thunderstormsThis little mist doesn’t bother meNow he has met a MexicanHe says to him haughtilytell me the newsI am Gregorio CortezIt is said that because of me Many people have been killedI will surrender nowBecause such things are not rightCortez says to JesúsAt last you are going to see itGo tell the rangersTo come and arrest meAll the rangers were coming Coming so fast they even flew For they wanted to get The thousand dollars they were offered When they surrounded the house Cortez suddenly appeared before   them You will take me if I’m willing But not any other wayThen the Major Sheriff said As if he was going to cry Cortez hand over your weaponsWe are not going to killThen said Gregorio CortezShouting to them in a loud voiceI won’t surrender my armsUntil I am in a cellThen said Gregorio CortezHe said in his godly voice I won’t surrender my armsUntil I’m inside a jailNow they have taken CortezNow matters are at an end His poor familyAre suffering in their heartsNow with this I say farewell In the shade of a cypress treeThis is the end of the singing of the ballad of Cortez\n\n\n\n\n\n\n\nCode\ndf = pd.DataFrame(ents, columns=[\"NER_Places\"])\ngeolocator = ArcGIS(user_agent='CorridosMap')\ngeocode = lambda query: geolocator.geocode(\"%s, Texas\" % query)\ndf['Location'] = df['NER_Places'].apply(geocode)\n#df['geometry'] = df['NER_Places'].apply(geocode)\ndf\n\n\n\n\n\n\n  \n    \n      \n      NER_Places\n      Location\n    \n  \n  \n    \n      0\n      Karnes\n      (Karnes County, Texas, (28.905630820000056, -9...\n    \n    \n      1\n      Gonzales\n      (Gonzales, Texas, (29.500150000000076, -97.452...\n    \n    \n      2\n      Laredo\n      (Laredo, Texas, (27.530920000000037, -99.50230...\n    \n    \n      3\n      Encinal\n      (Encinal, Texas, (28.046230000000037, -99.3566...\n    \n  \n\n\n\n\n\n\nCode\ngdf = gpd.tools.geocode(df.Location, provider='ArcGIS')\ngdf\n\n\n\n\n\n\n  \n    \n      \n      geometry\n      address\n    \n  \n  \n    \n      0\n      POINT (-97.85942 28.90563)\n      Karnes County, Texas\n    \n    \n      1\n      POINT (-97.45223 29.50015)\n      Gonzales, Texas\n    \n    \n      2\n      POINT (-99.50231 27.53092)\n      Laredo, Texas\n    \n    \n      3\n      POINT (-99.35670 28.04623)\n      Encinal, Texas\n    \n  \n\n\n\n\n\n\nCode\npx.set_mapbox_access_token(open(\"mapboxtoken\").read())\nfig = px.line_mapbox(gdf, text=\"address\",\n                        lat=gdf.geometry.y,\n                        lon=gdf.geometry.x,\n                        labels=\"address\",\n                        animation_frame=\"address\"\n                        )\n\nfig.update_layout(mapbox_style=\"stamen-terrain\", mapbox_zoom=6, mapbox_center_lat = 29,\n    margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n\n\n\nfig.show()"
  },
  {
    "objectID": "index.html#who-was-gregorio-cortez",
    "href": "index.html#who-was-gregorio-cortez",
    "title": "El Corrido de Gregorio Cortez NER and Mapping book",
    "section": "Who was Gregorio Cortez",
    "text": "Who was Gregorio Cortez"
  },
  {
    "objectID": "index.html#why-is-the-el-corrido-de-gregorio-cortez-important-to-usa-history",
    "href": "index.html#why-is-the-el-corrido-de-gregorio-cortez-important-to-usa-history",
    "title": "El Corrido de Gregorio Cortez NER and Mapping book",
    "section": "Why is the El Corrido de Gregorio Cortez important to USA history",
    "text": "Why is the El Corrido de Gregorio Cortez important to USA history\n\nNewspapers\nGregorio Cortez’s Trail from Dallas Morning News"
  },
  {
    "objectID": "index.html#map",
    "href": "index.html#map",
    "title": "El Corrido de Gregorio Cortez NER and Mapping book",
    "section": "Map",
    "text": "Map"
  },
  {
    "objectID": "01webscrapBS.html#list-of-unincorporated-communities-in-texas",
    "href": "01webscrapBS.html#list-of-unincorporated-communities-in-texas",
    "title": "1  Web Scraping Wiki tables with Beautiful Soup",
    "section": "1.2 List of Unincorporated Communities in Texas",
    "text": "1.2 List of Unincorporated Communities in Texas\n\n\nCode\ndef table_extraction(a,b):\n    url= a \n    file = f\"list of texas places/{b}.txt\" \n    s = requests.get(url)\n    soup= BeautifulSoup(s.text, \"html.parser\") #to tell the program to read the site as HTML (lxml)\n    table = soup.find(\"table\", class_=\"wikitable sortable mw-collapsible\")\n    with open (file, \"w\", encoding=\"utf-8\")as f: \n        #rows=list()\n        #headerString  = \"\"\n        dataString = \"\"\n        for row in table.find_all(\"tr\"):   \n            #for th in row.find_all(\"th\"): \n                #headerString  = headerString+th.get_text(strip=True)+\"|\"\n                #print(headerString)\n                #ending a line break to organize the txt file\n            for td in row.find_all(\"td\"):\n                dataString = dataString+td.get_text(strip=True)+\"|\"\n            dataString=dataString + \"\\n\"\n        #f.write(headerString)       \n        f.write(dataString)\n\ndef do_all(a, b):\n    table_extraction(a,b)\n\ndo_all(\"https://en.wikipedia.org/wiki/List_of_unincorporated_communities_in_Texas\", \"List of unincorporated communities in Texas\")"
  },
  {
    "objectID": "01webscrapBS.html#list-of-ghost-towns-in-texas",
    "href": "01webscrapBS.html#list-of-ghost-towns-in-texas",
    "title": "1  Web Scraping Wiki tables with Beautiful Soup",
    "section": "1.3 List of Ghost towns in Texas",
    "text": "1.3 List of Ghost towns in Texas\n\n\nCode\ndef table_extraction(a,b):\n    url= a \n    file = f\"list of texas places/{b}.txt\" \n    s = requests.get(url)\n    soup= BeautifulSoup(s.text, \"html.parser\") #to tell the program to read the site as HTML (lxml)\n    table = soup.find(\"table\", class_=\"wikitable sortable\")\n    with open (file, \"w\", encoding=\"utf-8\")as f: \n        #rows=list()\n        #headerString  = \"\"\n        dataString = \"\"\n        for row in table.find_all(\"tr\"):   \n            #for th in row.find_all(\"th\"): \n                #headerString  = headerString+th.get_text(strip=True)+\"|\"\n                #print(headerString)\n                #ending a line break to organize the txt file\n            for td in row.find_all(\"td\"):\n                dataString = dataString+td.get_text(strip=True)+\"|\"\n            dataString=dataString + \"\\n\"\n        #f.write(headerString)       \n        f.write(dataString)\n\ndef do_all(a, b):\n    table_extraction(a,b)\n\ndo_all(\"https://en.wikipedia.org/wiki/List_of_ghost_towns_in_Texas\", \"List of ghost towns in Texas\")"
  },
  {
    "objectID": "02textfile_to_jsonfile.html#list-of-unincoporated-communities",
    "href": "02textfile_to_jsonfile.html#list-of-unincoporated-communities",
    "title": "2  Text file to json file",
    "section": "2.2 List of unincoporated communities",
    "text": "2.2 List of unincoporated communities\n\n\nCode\nimport json\n#file to convert\nfile= f\"list of texas places\\List of unincorporated communities in Texas.txt\"\n#create a list to store data\ndictionary= {}\nunincorporatedcommunitieslist = []\n#read file\nwith open(file, encoding='utf-8') as f:\n    for d in f:\n        if \"|\" in d:\n            #print(d)\n            #read lines from file, creating vars based on position and indicator of info needed\n            community, county, data = d.strip(\" \").split(\"|\", 2)\n            x={\n                \"Community\": community,\n                \"Primary County\": county\n            }\n            unincorporatedcommunitieslist.append(x)\n            #print(municipalitylist)\n\n\ndictionary[\"List of Unincorporated communities\"] =  unincorporatedcommunitieslist\n\n#print(municipalitylist)\n#print(dictionary)\n\n#print(len(dictionary))\n#create json output file\nout_file = open(\"data/TexasNER_GPE_master.json\", \"w\")\njson.dump(dictionary, out_file, indent=4) \nout_file.close()\n\n#run code"
  },
  {
    "objectID": "02textfile_to_jsonfile.html#list-of-ghost-towns",
    "href": "02textfile_to_jsonfile.html#list-of-ghost-towns",
    "title": "2  Text file to json file",
    "section": "2.3 List of Ghost towns",
    "text": "2.3 List of Ghost towns\n\n\nCode\nimport json\n#file to convert\nfile= f\"list of texas places\\List of ghost towns in Texas.txt\"\n#create a list to store data\ndictionary= {}\nghosttownslist = []\n#read file\nwith open(file, encoding='utf-8') as f:\n    for d in f:\n        if \"|\" in d:\n            #print(d)\n            #read lines from file, creating vars based on position and indicator of info needed\n            name, maincounty, data = d.strip(\" \").split(\"|\", 2)\n            x={\n                \"Name\": name,\n                \"Main County\": maincounty,\n            }\n            ghosttownslist.append(x)\n            #print(municipalitylist)\n\n\ndictionary[\"List of Ghost towns\"] = ghosttownslist\n\n#print(municipalitylist)\n#print(dictionary)\n\n#print(len(dictionary))\n#create json output file\nout_file = open(\"data/TexasNER_GPE_master.json\", \"w\")\njson.dump(dictionary, out_file, indent=4) \nout_file.close()"
  }
]